% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbUpdateTable.R
\name{dbUpdateTable}
\alias{dbUpdateTable}
\title{Update a SQL table using values from a data.frame}
\usage{
dbUpdateTable(
  conn,
  name,
  value,
  join_on = NULL,
  stage_table = paste0("stage_", name),
  overwrite_stage_table = TRUE,
  verbose = FALSE
)
}
\arguments{
\item{conn}{A DBI Connection Object}

\item{name}{A table name in the DB to upsert to}

\item{value}{A dataframe object containing data to update}

\item{join_on}{A character vector of column names to match between the dataframe and SQL table. If not provided, will guess based on SQL primary key or identity columns}

\item{overwrite_stage_table}{A boolean indicating if you want to drop the staging table (if it already exists). If it does already exist, and this value is `false`, then the upsert will fail.}

\item{verbose}{A boolean indicating whether or not to print steps executed in the console}

\item{staging_table}{A string of the table name to create to stage data. If not provided, a new table name will be generated.}
}
\description{
This function will attempt to guess how to update the SQL table based on the existance of any identity/sequence columns or primary key columns.
Alternatively, you can override the guessing by supplying a character vector of column names to `join_on` to tell the function how to match values from the data.frame to the SQL table.
If the target SQL table does not have any identity or primary key columns, `join_on` must be provided, or the function will throw an error.
Use the `verbose = TRUE` argument to show details of the function's progress in the console.
This function returns `TRUE` if it succeeds.
}
